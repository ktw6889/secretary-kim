<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- 해석해보면 DispatcherServlet Context : 이 서블릿의 요청처리 인프라를 정의한다. 이다. Dispatcher 서블릿과 관련된 설정을 하는것 같다.
		정답은 아니지만 주로 View 지원 bean을 설정한다고 한다. ex) Controller
		그래서 그런지 어노테이션, 리소스 디렉토리, ViewResolver에 관한 설정들이 있다.
	 -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- Spring MVC @Controller 프로그래밍 모델 활성화  -->
	<annotation-driven />


	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!--  HTML 리소스 디렉토리 정의 -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!--  ViewResolver로 jsp와 name 을 매핑 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- Tiles -->
    <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                <beans:value>classpath:/spring/tiles/tiles-def.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
    <beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <beans:property name="order" value="3" />
    </beans:bean>
 <!-- Tiles End -->

    <!-- 베이스 패키지 하위 모든 어노테이션을 스캔해서 빈으로 등록하겠다는 것 -->
	<context:component-scan base-package="secretary" />

	<!-- @Aspect어노테이션이 있는 클래스를 자동으로 찾아서 설정해줌 -->
	<aop:aspectj-autoproxy/>

	<!-- common interceptor -->
	 <interceptors>
       <interceptor>
           <mapping path="/**"/>
           <beans:bean id="commonInterceptor" class="secretary.common.filter.CommonInterceptor"/>
       </interceptor>
    </interceptors>
	<!-- inteceptor end -->

	<!-- 리소스 디렉토리 아래의 message.properties를 MessageSource에 포함시킨다. -->
	<beans:bean id="messageSource" class="secretary.common.util.DatabaseMessageSource">
	    <beans:property name="basenames" value="classpath:defaultMessages"/>
	    <beans:property name="defaultEncoding" value="UTF-8"/>
	</beans:bean>

<!--
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename" value="classpath:message/message"/>
		<beans:property name="defaultEncoding" value="UTF-8" />
		<beans:property name="cacheSeconds" value="60"/>
	</beans:bean>
-->
	<!-- 언어 정보를 세션에 저장하여 사용합니다. -->
  <beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
  	<beans:property name="defaultLocale" value="ko"/>
  </beans:bean>

  <interceptors>
  	<beans:bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
  		<beans:property name="paramName" value="lang" />
  	</beans:bean>
  </interceptors>

</beans:beans>