<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<security:http auto-config="true" use-expressions="true"> 
		<security:csrf disabled="true"/> 
		<!-- 
		<security:intercept-url pattern="/loginForm.do" access="permitAll" /> 
		<security:intercept-url pattern="/secure/**" access="hasRole('ROLE_USER')" />
    	<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
    	<security:intercept-url pattern="/login" access="permitAll()" />
    	<security:intercept-url pattern="/" access="permitAll()" />
    	<security:intercept-url pattern="/resources/**" access="permitAll()" />
    	<security:intercept-url pattern="/*/**" access="denyAll()" />
    	-->
    	 <security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
    	<security:intercept-url pattern="/**" access="permitAll()" />
		<!-- 
		<security:form-login login-page="/login" authentication-success-handler-ref="loginSuccessHandler" authentication-failure-handler-ref="loginFailureHandler" login-processing-url="/auth" authentication-failure-url="/login.do?error" username-parameter="id" password-parameter="password"/> 
		<security:logout logout-url="/logout" invalidate-session="true" logout-success-url="/login?status=logout" /> 
		<security:session-management invalid-session-url="/loginFailure"> 
			<security:concurrency-control max-sessions="3" error-if-maximum-exceeded="false" /> 
		</security:session-management> 
		 -->
		 <security:form-login login-page="/login.do" authentication-success-handler-ref="loginSuccessHandler" authentication-failure-url="/login.do?status=fail"/>
		 <security:logout logout-success-url="/login.do?status=logout" /> 
		 
	</security:http> 
	
	<bean id="loginSuccessHandler" class="secretary.common.user.helper.LoginSuccessHandler"> 
		<property name="defaultTargetUrl" value="/main.do" /> 
		<property name="alwaysUseDefaultTargetUrl" value="true" /> 
	</bean> 
	<!-- 
	<bean id="loginFailureHandler" class="secretary.common.user.helper.LoginFailureHandler"> 
		<property name="defaultFailureUrl" value="/login.do?status=fail" /> 
	</bean> 
	 -->	
	 
	<!-- secured method --> 
	<security:global-method-security secured-annotations="enabled" /> 
	

	
	<!-- 인메모리 방식으로 유저 등록 -->
	<!-- 
	<security:authentication-manager>
            <security:authentication-provider>
                <security:user-service>                  
                    <security:user name="user" password="{noop}user" authorities="ROLE_USER"/>
                    <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
                </security:user-service>
            </security:authentication-provider>
    </security:authentication-manager>
     -->
     
    <!--방법 2. Other Authentication Provider (Using Database)-->    
   
	<security:authentication-manager>
	    <security:authentication-provider>
	    <security:jdbc-user-service
	        data-source-ref="dataSource"
	        users-by-username-query="select user_id, password, 1 enables from ot_com_user where user_id=?"
	        authorities-by-username-query="select user_id, authority from ot_com_auth where user_id=?"/>
	    </security:authentication-provider>
	</security:authentication-manager>	

	
	<bean id="userService" class="secretary.common.user.service.UserService" /> 	
	<bean id="customUserDetailsService" class="secretary.common.user.service.CustomUserDetailsService" /> 
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> 
	<bean id="userAuthProvider" class="secretary.common.user.helper.CustomAuthenticationProvider"> 
	    <!--  	 
		<property name="userDetailsService" ref="customUserDetailsService" /> 
		<property name="passwordEncoder" ref="passwordEncoder" /> 
		-->
	</bean>

		<!-- provider --> 
	<security:authentication-manager> 
		<security:authentication-provider ref="userAuthProvider" /> 
    	<security:authentication-provider user-service-ref="customUserDetailsService"/>
	</security:authentication-manager> 

</beans>